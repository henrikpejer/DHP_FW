<?php
use \DHP\dependencyInjection\DI;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 19:47:35.
 */
class DITest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DI
     */
    protected $object;

    /**
     */
    public function testAddClassAlias()
    {
        $this->object->set('session', 'DHP\middleware\Session');
        $this->object->alias('Event', 'session');
        $o = $this->object->get('Event');
        \PHPUnit_Framework_Assert::assertInstanceOf('DHP\middleware\Session', $o);
    }

    public function testAddObject()
    {
        $o = new \DHP\middleware\Session();
        $this->object->set('Event', $o);
        $o = $this->object->get('Event');
        \PHPUnit_Framework_Assert::assertInstanceOf('DHP\middleware\Session', $o);
    }

    public function testInstantiateObject()
    {
        $this->object->set('DHP\App');
        $o = $this->object->get('DHP\App');
        \PHPUnit_Framework_Assert::assertInstanceOf('DHP\App', $o);
    }

    public function testSameObjectIsLoaded()
    {
        $e = $this->object->get('DHP\App');
        $ref = spl_object_hash($e);
        $this->object->set('app', $e);
        $this->object->alias('masta', 'app');
        \PHPUnit_Framework_Assert::assertEquals($ref, spl_object_hash($this->object->get('app')));
        \PHPUnit_Framework_Assert::assertEquals($ref, spl_object_hash($this->object->get('DHP\App')));
        \PHPUnit_Framework_Assert::assertEquals($ref, spl_object_hash($this->object->get('masta')));
    }

    public function testAliasNotPresent()
    {
        $this->object->alias('new_alias', 'DHP\app');
        $app = $this->object->get('new_alias');
        $this->assertInstanceOf('DHP\app', $app);
    }

    public function testLoadingClass()
    {
        eval('class henrik{}');
        $o = $this->object->get('henrik');
        \PHPUnit_Framework_Assert::assertInstanceOf('henrik', $o);
    }

    public function testGenericSetGetMethods()
    {
        $this->object->DI = $this->object;
        \PHPUnit_Framework_Assert::assertEquals($this->object, $this->object->{'DI'});
    }

    public function testSetting()
    {
        $this->object->set('DHP\App')->setArguments(array($this->object))->addMethodCall('start');
        $o = $this->object->get('DHP\App');
        $this->assertInstanceOf('DHP\App', $o);
    }

    public function testComponent()
    {
        $uuid1 = $this->object->get('DHP\component\Uuid');
        $uuid2 = $this->object->get('DHP\component\Uuid');
        $this->assertNotEquals(spl_object_hash($uuid1), spl_object_hash($uuid2));
    }

    public function testNonExisting()
    {
        $this->assertNull($this->object->get('DHP\nonExistingClass'));
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DI();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
