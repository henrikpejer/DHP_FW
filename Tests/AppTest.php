<?php
namespace DHP_FW;
require_once __DIR__ . '/../lib/DHP_FW/App.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-01-01 at 06:21:34.
 */
class AppTest extends \PHPUnit_Framework_TestCase {
    /**
     * @var App
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        #$this->DI = \app\DI();
        #$__event__ = $this->DI->get('DHP_FW\EventInterface');
        #$this->request = new Request('GET','/blog/this-is-the-title',NULL,$__event__);
        #$this->object = new App($this->request, $this->DI,$__event__);
        #$this->event = $__event__;
        $this->DI      = \app\DI();
        $this->object  = $this->DI->get('DHP_FW\AppInterface');
        $this->request = $this->DI->get('DHP_FW\RequestInterface');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object->cache_flush();
    }


    public function testEnabledDisbled() {
        \PHPUnit_Framework_Assert::assertFalse($this->object->enabled('Henrik'));
        $this->object->enable('Henrik');
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('Henrik'));
        $this->object->disable('Henrik');
        \PHPUnit_Framework_Assert::assertFalse($this->object->enabled('Henrik'));
    }

    public function testStart() {
        \PHPUnit_Framework_Assert::assertNull($this->object->start());
        $this->object->routes->get('', function () {
            return 'working';
        });
        \PHPUnit_Framework_Assert::assertEquals('working', $this->object->start());
        eval('namespace app\\controllers;class Blog extends \\DHP_FW\Controller{ function index(){ return "working from controller";}}');
        $this->object->routes->get('', function () {
            return array('controller' => 'Blog', 'method' => 'index');
        });
        \PHPUnit_Framework_Assert::assertEquals('working from controller', $this->object->start());
        $this->object->request->setMethod('NONEXISTING');
        \PHPUnit_Framework_Assert::assertNull($this->object->start());
    }

    public function testControllerWithParams() {
        $app = new App(new Request('GET', '/blog/this-is-the-title', NULL, new Event()), $this->DI, new Event(), $this->DI->get('DHP_FW\RoutingInterface'));
        $app->routes->get('blog/title', function ($title) {
            return "error";
        });
        $app->routes->get('blog/:title/or/something', function ($title) {
            return "error";
        });

        $app->routes->get(':blog/title', function ($title) {
            return "error";
        });


        $app->routes->get('blog/:title', function ($title) {
            return $title;
        });
        $app->routes->param('title', function ($title) {
            return $title . ' check';
        });

        \PHPUnit_Framework_Assert::assertEquals('this is the title check', $app->start());

        $app = new App(new Request('GET', '/blog/this-is-the-title', NULL, new Event()), $this->DI, new Event(),$this->DI->get('DHP_FW\RoutingInterface'));
        eval('namespace app\\Controllers; class blogcontroller extends \\DHP_FW\\controller{function blogpage($title){return $title;}}');

        $app->routes->get('blog/:title', function () {
            return array('controller' => 'blogcontroller', 'method' => 'blogpage');
        });
        $app->routes->param('title', function ($title) {
            return $title . ' check';
        });
        \PHPUnit_Framework_Assert::assertEquals('this is the title check', $app->start());
    }


    public function testMiddleware() {
        $_COOKIE = array('cookieName' => 'CoookieValue');
        $req     = new Request('GET', '/blog/this-is-the-title', NULL, new Event());
        $this->DI->set('DHP_FW\RequestInterface', $req);
        $app = new App($req, $this->DI, new Event(),$this->DI->get('DHP_FW\RoutingInterface'));
        $app->middleware('Cookie');
        $app->routes->get('blog/:title', function ($title) use ($req) {
            return $title . $req->cookie->cookieName;
        });

        \PHPUnit_Framework_Assert::assertEquals('this is the titleCoookieValue', $app->start());
    }

    public function testCache() {
        $this->expectOutputString('this is the titlethis is the title');
        eval('namespace app\middleware;class siteCache extends \DHP_FW\middleware\Cache{}');
        $this->object->middleware('siteCache');
        \PHPUnit_Framework_Assert::assertTrue($this->object->enable('use_cache'));
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $this->object->setupCache();
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $res = $this->DI->get('DHP_FW\ResponseInterface');
        $this->object->routes->get('', function ($title = 'this is the title') use ($res) {
            $res->send($title);
        });
        $this->object->start();
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $uri = '';
        \PHPUnit_Framework_Assert::assertEquals(array('headers'=>array('Status'=>'200 OK'),'data'=>'this is the title'),$this->DI->get('DHP_FW\EventInterface')->trigger('DHP_FW.app.cacheForRequest',$uri));
        \PHPUnit_Framework_Assert::assertTrue($this->object->start());
        $this->object->cache_flush();
    }

    public function testRouteCache() {
        $this->expectOutputString('this is the titlethis is the title');
        \PHPUnit_Framework_Assert::assertTrue($this->object->enable('use_cache'));
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $this->object->setupCache();
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $res = $this->DI->get('DHP_FW\ResponseInterface');
        $this->object->routes->get('', function ($title = 'this is the title') use ($res) {
            $res->send($title);
        });
        \PHPUnit_Framework_Assert::assertNull($this->object->start());
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        \PHPUnit_Framework_Assert::assertNull($this->object->start());
        $this->object->cache_flush();
    }

    public function testDeleteCache(){
        \PHPUnit_Framework_Assert::assertTrue($this->object->enable('use_cache'));
        \PHPUnit_Framework_Assert::assertTrue($this->object->enabled('use_cache'));
        $this->object->setupCache();
        \PHPUnit_Framework_Assert::assertFalse($this->object->cache('cachetest'));
        \PHPUnit_Framework_Assert::assertEquals('henrik',$this->object->cache('cachetest','henrik'));
        \PHPUnit_Framework_Assert::assertEquals('henrik',$this->object->cache('cachetest'));
        \PHPUnit_Framework_Assert::assertTrue($this->object->cacheDelete('cachetest'));
        \PHPUnit_Framework_Assert::assertFalse($this->object->cache('cachetest'));
        \PHPUnit_Framework_Assert::assertEquals('henrik',$this->object->cache('cachetest','henrik'));
        \PHPUnit_Framework_Assert::assertEquals('henrik',$this->object->cache('cachetest'));

    }
}
