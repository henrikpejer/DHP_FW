<?php
namespace DHP_FW\storage;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-22 at 20:39:14.
 */
class FileTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var File
     */
    protected $object;

    protected $fileContents = "This is a test file that we read";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(){
        $this->filePath = __DIR__.DIRECTORY_SEPARATOR.'test.txt';
        $fh = fopen($this->filePath, 'w+b');
        fwrite($fh,$this->fileContents);
        fclose($fh);
        $this->object = new File($this->filePath);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(){
        # $this->object->close();
        unset($this->object);
    }

    public function testReadPart() {
        \PHPUnit_Framework_Assert::assertEquals('This is a ',$this->object->readPart(0,10));
    }

    public function testTruncate() {
        $this->object->truncate();
        \PHPUnit_Framework_Assert::assertEquals('',$this->object->read(100));
    }

    public function testAmend(){
        $this->object->truncate();
        $this->object->amend($this->fileContents);
        $this->object->amend($this->fileContents);
        \PHPUnit_Framework_Assert::assertEquals($this->fileContents.$this->fileContents,$this->object->read(100));
        $this->object->truncate();
        $this->object->amend($this->fileContents);
        \PHPUnit_Framework_Assert::assertEquals($this->fileContents,$this->object->read(100));
    }


    public function testRead() {
        \PHPUnit_Framework_Assert::assertEquals($this->fileContents,$this->object->read(100));
    }

    public function testClose() {
        \PHPUnit_Framework_Assert::assertNull($this->object->close());
        $this->object->read(100);
        \PHPUnit_Framework_Assert::assertTrue($this->object->close());
    }

    public function testRewind() {
        \PHPUnit_Framework_Assert::assertEquals($this->fileContents,$this->object->read(100));
        $this->object->rewind();
        $this->object->amend('k');
        \PHPUnit_Framework_Assert::assertEquals($this->fileContents.'k',$this->object->read(100));
    }

    public function testDelete() {
        $this->object->delete();
        \PHPUnit_Framework_Assert::assertFileNotExists($this->filePath);
    }

    public function testTmpFile(){
        $this->object = new File();
        $this->object->read(10);
        \PHPUnit_Framework_Assert::assertTrue($this->object->isTempFile());
        \PHPUnit_Framework_Assert::assertContains('DHP_FW_',$this->object->getPath());
    }

    public function testCreateFile(){
        $filePath = $this->filePath.'_2';
        $this->object = new File($this->filePath.'_2');
        $this->object->read(1);
        \PHPUnit_Framework_Assert::assertFileExists($filePath);
        $this->object->delete();
        \PHPUnit_Framework_Assert::assertFileNotExists($filePath);
    }

    /**
     * @dddepends testReadOnlyFile
     * @expectedException \RuntimeException
     * @expectedExceptionMessage File is not read and/or writable
     */
    public function testWriteOnReadOnlyFile(){
        $filePath = $this->filePath . '_ro';
        touch($filePath);
        chmod($filePath,0444);
        $this->object = new File($filePath);
        $this->object->amend('will not work');
    }

    /**
     * @depends testWriteOnReadOnlyFile
     */
    public function testDeleteFile(){
        $filePath = $this->filePath . '_ro';
        $this->object = new File($filePath);
        chmod($filePath,0777);
        $this->object->delete();
        \PHPUnit_Framework_Assert::assertFileNotExists($filePath);
    }
}
