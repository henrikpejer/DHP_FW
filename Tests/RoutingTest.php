<?php
namespace DHP_FW;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-31 at 19:53:21.
 */
class RoutingTest extends \PHPUnit_Framework_TestCase {
    /**
     * @var Routing
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Routing(\app\DI()->get('DHP_FW\DependencyInjection\DIInterface'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }


    public function testGet() {
        $this->object->get('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('GET', 'blog'));
    }

    public function testPost() {
        $this->object->get('blog', function () {
            return 'This is false';
        });
        $this->object->post('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('POST', 'blog'));
    }


    public function testDelete() {
        $this->object->get('blog', function () {
            return 'This is false';
        });
        $this->object->delete('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('DELETE', 'blog'));
    }


    public function testPut() {
        $this->object->get('blog', function () {
            return 'This is false';
        });
        $this->object->put('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('PUT', 'blog'));
    }

    public function testHead() {
        $this->object->get('blog', function () {
            return 'This is false';
        });
        $this->object->head('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('HEAD', 'blog'));
    }

    public function testAny() {
        $this->object->any('blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('PUT', 'blog'));
    }

    public function testVerb() {
        $this->object->verb(array('GET', 'POST'), 'blog', function () {
            return 'This is correct';
        });
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('POST', 'blog'));
        \PHPUnit_Framework_Assert::assertEquals('This is correct', $this->object->match('GET', 'blog'));
    }

    public function testRoutes() {
        $this->object->verb(array('GET', 'POST'), 'blog', function () {
            return 'This is correct';
        });
        $valid = array(
            'GET' => array('blog' => function () {
                return 'This is correct';
            }),
            'POST' => array('blog' => function () {
                return 'This is correct';
            }),
            'DELETE' => array(),
            'PUT' => array(),
            'ANY' => array()
        );
        \PHPUnit_Framework_Assert::assertEquals($valid,$this->object->routes());
    }


    public function testParam() {
        $this->object->param('user',function($userId){
            return $userId . ' was found';
        });
        $this->object->get('user/:user',function($user){
            return $user .'. fine.';
        });
        \PHPUnit_Framework_Assert::assertEquals('2 was found. fine.',$this->object->match('GET','user/2'));
    }

    public function testContinueWithNextRoute() {
        $o = $this->object;
        $this->object->get('api/*',function()use($o){
            $o->continueWithNextRoute();
            echo 'API here!';
        });
        $this->object->get('api/login',function(){
           return 'Logged in';
        });
        $this->expectOutputString('API here!');
        \PHPUnit_Framework_Assert::assertEquals('Logged in',$this->object->match('GET','api/login'));
    }

    public function testMatch() {
        $this->object->get('blog',function(){return FALSE;});
        $this->object->get('blog/page/:title',function(){return FALSE;});
        $this->object->get('blog/page/*',function(){return FALSE;});
        $this->object->post('blog/page/:title/hej',function($title){return FALSE;});
        $this->object->post('blog/page/:title/hej',function($title){return FALSE;});
        $this->object->post('blog/page/:title',function($title){return $title . ' is correct';});
        \PHPUnit_Framework_Assert::assertEquals('mr mr is correct',$this->object->match('POST','blog/page/mr-mr'));
    }
}
